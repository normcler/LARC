@model LARC.Models.FundsOverlapTable
@{
  ViewBag.Title = "Funds Overlap Table";
}

@section Includes {
  <link href="~/Content/FundsOverlapTable.css"
        rel="stylesheet"
        type="text/css" />
}
<div class="container col-md-6">
  <h2>Funds Overlap Table</h2>

  <table class="table-condensed table-striped table-bordered">
    <caption>
      Funds Overlap Table for funds
      @Html.ActionLink(Model.FundSymbol_1, "Index", "FundDetails", new { id = Model.FundSymbol_1 }, null) and
      @Html.ActionLink(Model.FundSymbol_2, "Index", "FundDetails", new { id = Model.FundSymbol_2 }, null)
  </caption>
  <thead>
    <tr>
      <th>Ticker</th>
      <th>Name</th>
      <th>Overlap (%)</th>
    </tr>
  </thead>
  <tbody>
    @{
      int numberOfTickers = Model.OverlapList.Count;
      for (int i = 0; i < numberOfTickers; i++)
      {
        <tr>
          <td>@Model.OverlapList[i].HoldingTicker</td>
          <td>@Model.OverlapList[i].HoldingName</td>
          <td>@Model.OverlapList[i].Overlap</td>
        </tr>
      }
    }
  </tbody>
</table>
</div>
<div class="container col-md-4">
  <div id="chart_div"></div>
</div>
@section localScripts {
  <script type="text/javascript"
          src="https://www.gstatic.com/charts/loader.js">
  </script>
  <script type="text/javascript">

    // Load the Visualization API and the corechart package.
    google.charts.load('current', { 'packages': ['corechart'] });

    // Set a callback to run when the Google Visualization API is loaded.
    google.charts.setOnLoadCallback(drawChart);

    // Callback that creates and populates a data table,
    // instantiates the pie chart, passes in the data and
    // draws it.
    function drawChart() {

      // Create the data table.

      var data = new google.visualization.DataTable();
      data.addColumn('string', 'Ticker');
      data.addColumn('number', 'Overlap');
      @{
        decimal totalOverlap = Model.OverlapList.
          Select(o => o.Overlap).ToArray().Sum();
        decimal [] equityOverlap = Model.OverlapList.
          Select(x => (x.Overlap / totalOverlap) ).ToArray();
      }

      //data.addColumn('string', 'Topping');
      //data.addColumn('number', 'Slices');

      // the <text> HTML tag is telling Razor that this is not C#.
      // this is not rendered.
      data.addRows([
      @{
        for (int i = 0; i < Model.OverlapList.Count; i++)
        {
          // Note the semicolon. This is different than the original Google 
          // code commented out below because we are adding rows one at a time
          // and not as an array of arrays.
          //Remember, the code in this script is JavaScript.
          <text>['@Model.OverlapList[i].HoldingTicker',
                              @equityOverlap[i]],</text>
        }
      }
      ]);
      //data.addRows([

      //  ['Mushrooms', 3],
      //  ['Onions', 1],
      //  ['Olives', 1],
      //  ['Zucchini', 1],
      //  ['Pepperoni', 2]
      //]);

          // Set chart options
      //var options = {
      //  'title': 'How Much Pizza I Ate Last Night',
      //  'width': 400,
      //  'height': 300
      //};

      var options = {
        'title': 'Percent Overlap',
        'width': 400,
        'height': 300
      }

        // Instantiate and draw our chart, passing in some options.
        var chart = new google.visualization.
          PieChart(document.getElementById('chart_div'));
        chart.draw(data, options);
    }
  </script>
}
