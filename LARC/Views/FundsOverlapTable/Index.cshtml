@model LARC.Models.FundsOverlapTable
@{
  ViewBag.Title = "Funds Overlap Table";
}

@section Includes {
  <link href="~/Content/FundsOverlapTable.css"
        rel="stylesheet"
        type="text/css" />
}
<div class="container-fluid">
  <div class="row">
    <div class="col-md-3 col-md-offset-1 col-xs-12">
      <h2>Funds Overlap Table</h2>

      <table class="table-condensed table-striped table-bordered">
        <caption>
          Funds Overlap Table for funds
          @Html.ActionLink(Model.FundSymbol_1, "Index", "FundDetails",
            new { id = Model.FundSymbol_1 }, null) and
          @Html.ActionLink(Model.FundSymbol_2, "Index", "FundDetails",
            new { id = Model.FundSymbol_2 }, null)
        </caption>
        <thead>
          <tr>
            <th>Ticker</th>
            <th>Name</th>
            <th>Overlap (%)</th>
          </tr>
        </thead>
        <tbody>
          @{
            int numberOfTickers = Model.OverlapList.Count;
            for (int i = 0; i < numberOfTickers; i++)
            {
              <tr>
                <td>@Model.OverlapList[i].HoldingTicker</td>
                <td>@Model.OverlapList[i].HoldingName</td>
                <td>@Model.OverlapList[i].Overlap</td>
              </tr>
            }
          }
        </tbody>
      </table>
    </div>
    <div class="col-md-3 col-md-offset-1 col-xs-12">
      <div id="equities_chart_div"></div>
    </div>
    <div class="col-md-3 col-xs-12">
      <div id="overall_chart_div"></div>
    </div>
  </div>
</div>


@section localScripts {
  <script type="text/javascript"
          src="https://www.gstatic.com/charts/loader.js">
  </script>
  <script type="text/javascript">

    // Load the Visualization API and the corechart package.
    google.charts.load('current', { 'packages': ['corechart'] });

    // Set a callback to run when the Google Visualization API is loaded.
    google.charts.setOnLoadCallback(drawChart);

    // Callback that creates and populates a data table,
    // instantiates the pie chart, passes in the data and
    // draws it.
    function drawChart() {

      // Create the data table.

      @{
        decimal totalOverlap = Model.OverlapList.
          Select(o => o.Overlap).ToArray().Sum();
        decimal nonOverlap = 1.0m - totalOverlap;
        decimal [] equityOverlap = Model.OverlapList.
          Select(x => (x.Overlap / totalOverlap) ).ToArray();
      }
      var data = new google.visualization.DataTable();
      data.addColumn('string', 'Ticker');
      data.addColumn('number', 'Overlap');

      data.addRows([
      @{
        for (int i = 0; i < Model.OverlapList.Count; i++)
        {
          // Note the semicolon. This is different than the original Google
          // code because we are adding rows one at a time and not as an array
          // of arrays.
          //Remember, the code in this script is JavaScript.
          <text>['@Model.OverlapList[i].HoldingTicker',
                              @equityOverlap[i]],</text>
        }
      }
      ]);

      var data2 = new google.visualization.DataTable();
      data2.addColumn('string', 'Category');
      data2.addColumn('number', 'Overlap');

      @*data2.addRows([
      @{
        <text>['Overlapping', @totalOverlap]</text>
        <text>['Non-overlapping', @nonOverlap]</text>
      }
      ]);*@

      var options = {
        'title': 'Equities Overlap',
        'width': 400,
        'height': 300
      }

      //var options2 = {
      //  'title': 'Total Overlap',
      //  'width': 400,
      //  'height': 300
      //}

      // Instantiate and draw the equities chart, passing in some options.
      var chart = new google.visualization.
        PieChart(document.getElementById('equities_chart_div'));
      chart.draw(data, options);

      // Instantiate and draw the overall chart, passing in some options.
      //var chart2 = new google.visualization.
      //  PieChart(document.getElementById("overall_chart_div"));
      //chart2.draw(data2, options2);
    }
  </script>
}
